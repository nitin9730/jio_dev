import osimport pandas as pdimport calendarimport numpy as npM_Y='August_2024'#####File1# RRA DUMPfile_path1 = '/Users/nitin14.patil/Library/CloudStorage/OneDrive-RelianceCorporateITParkLimited/Documents/python_work/PNL Finance/input/RRA_dump.xlsx'excel_file = pd.ExcelFile(file_path1)sheet_names = excel_file.sheet_namesrra_dump = pd.read_excel(excel_file)print('rra_dump loaded!')rra_dump.columns= ['Channel Type', 'Channel Type.1', 'Store', 'Store.1', 'RR State','Profit Center', 'Article', 'Article.1', 'Family', 'Brick', 'Brand_ID','Calendar Year/Month', 'Qty', 'Total Gross Sales (B)','Total Category Discount (C)','Total Net Sales with tax', 'Tax amount','Total Net Sales Without Tax', 'COGS As Per MAP','COGS', 'Gross Margin', 'Margin (%)','Markdown Price Difference(L)','Markdown Price Difference(%)','Category Margin', 'Category % Gross Margin','Margin Per Unit']columns=rra_dump.columnsdf=rra_dump# Function to convert to 'Month Year' formatdef convert_to_month_year(value):    # Split the float into month and year    month, year = str(value).split('.')    month = int(month)  # Convert month to integer    year = int(year)    # Convert year to integer        # Get month name    month_name = calendar.month_name[month]        # Return in 'Month Year' format    return f"{month_name}_{year}"# Apply the function to the DataFramedf['Month_Year'] = df['Calendar Year/Month'].apply(convert_to_month_year)# Display the resultprint(df.tail())fofo_filtered = df[    (df['Channel Type'].isin(['ASP B2B FOFO', 'POS B2B SALES', 'ASP FOFO', 'POS SALES'])) |    (df['Channel Type.1'].isin(['ASP B2B FOFO', 'POS B2B SALES', 'ASP FOFO', 'POS SALES']))    ]fofo_filtered = fofo_filtered[fofo_filtered['Month_Year']==M_Y]# Assuming rra_dump is already loaded as your DataFramefofo_pivot = pd.pivot_table(    fofo_filtered,     values=['Qty', 'Total Net Sales with tax', 'Total Net Sales Without Tax', 'COGS'],    index=['Article', 'Store', 'RR State', 'Family', 'Brand_ID'],  # Use index to group by    aggfunc='sum'  # Aggregation method is 'sum').reset_index()#GST Ratejmd_filtered = df[    (df['Channel Type'].isin(['ASP B2B SALES','ASP SALES'])) |    (df['Channel Type.1'].isin(['ASP B2B SALES','ASP SALES']))    ]jmd_filtered = jmd_filtered[jmd_filtered['Month_Year']==M_Y]# Assuming rra_dump is already loaded as your DataFramejmd_gst_pivot = pd.pivot_table(    jmd_filtered,     values=['Total Net Sales with tax', 'Total Net Sales Without Tax'],    index=['Article'],  # Use index to group by    aggfunc='sum'  # Aggregation method is 'sum').reset_index()jmd_gst_pivot['GST Rate'] = np.where(jmd_gst_pivot['Total Net Sales Without Tax'] != 0, jmd_gst_pivot['Total Net Sales with tax'] / jmd_gst_pivot['Total Net Sales Without Tax'], 0)jmd_gst_pivot['GST Rate']=jmd_gst_pivot['GST Rate'].round(2)jmd_gst_pivot.to_excel('jmd_gst_pivot.xlsx')#COGS p.u.# COGS p.u.check_df = df[df['Channel Type'] == 490024627]jmd_cogs_pu = df[    (df['Channel Type'].isin(['ASP B2B FOFO', 'POS B2B SALES', 'ASP FOFO', 'POS SALES','POS B2B SALES','POS SALES','ASP B2B FOFO','ASP FOFO','BULK SALES'])) |    (df['Channel Type.1'].isin(['ASP B2B FOFO', 'POS B2B SALES', 'ASP FOFO', 'POS SALES','POS B2B SALES','POS SALES','ASP B2B FOFO','ASP FOFO','BULK SALES']))    ]jmd_cogs_pu_f = jmd_cogs_pu[jmd_cogs_pu['Month_Year']==M_Y]# Assuming rra_dump is already loaded as your DataFramecogs_pu_pivot = pd.pivot_table(    jmd_cogs_pu_f,     values=['Qty', 'COGS'],    index=['Article'],  # Use index to group by    aggfunc='sum'  # Aggregation method is 'sum').reset_index()cogs_pu_pivot['COGS p. u.']=cogs_pu_pivot['COGS']/cogs_pu_pivot['Qty']cogs_pu_pivot.to_csv('COGS p.u..csv')#Family and brandfnb_f = df[df['Month_Year']==M_Y]# Assuming rra_dump is already loaded as your DataFramefnb_pivot = pd.pivot_table(    fnb_f,     values=['Qty','Total Net Sales with tax','Total Net Sales Without Tax','COGS'],    index=['Article','Family', 'Brand_ID'],  # Use index to group by    aggfunc='sum'  # Aggregation method is 'sum').reset_index()fnb_pivot.to_csv('fnb.csv')#Articl_desc#Family and brandart_des_f = df[df['Month_Year']==M_Y]art_des_g=art_des_f[['Article','Article.1','Family', 'Brand_ID']]# Remove duplicate rowsart_des_g = art_des_g.drop_duplicates()art_des_g.to_csv('article_desc.csv')#####File1#IB SAPfile_path1 = '/Users/nitin14.patil/Library/CloudStorage/OneDrive-RelianceCorporateITParkLimited/Documents/python_work/PNL Finance/input/IB SAP.xlsx'excel_file = pd.ExcelFile(file_path1)sheet_names = excel_file.sheet_nameseb_data = pd.read_excel(excel_file,'EB')print('IB SAP loaded!')file_path1 = '/Users/nitin14.patil/Library/CloudStorage/OneDrive-RelianceCorporateITParkLimited/Documents/python_work/PNL Finance/input/State Master.xlsx'excel_file = pd.ExcelFile(file_path1)sheet_names = excel_file.sheet_namesstate_master = pd.read_excel(excel_file,'Sheet1')print('State Master loaded!')merged_df = pd.merge(eb_data, state_master[['Customer Code', 'State']], how='left', left_on='Customer Number', right_on='Customer Code')# If M3 lookup fails (NaN in the result), fallback to L3 lookupeb_data['State'] = merged_df['State_x'].fillna(pd.merge(eb_data, state_master[['Customer Code', 'State']], how='left', left_on='Payer', right_on='Customer Code')['State_x'])columns=eb_data.columnseb_pivot=pd.pivot_table(    eb_data,     values=['Invoice Quantity', 'Pricing Condition Amount', 'Tax Amount', 'Net Value', 'Cost(COGS)'],    index=['Material Number', 'Plant', 'State'],  # Use index to group by    aggfunc='sum'  # Aggregation method is 'sum').reset_index()rra_dump.columns= ['Channel Type', 'Channel Type.1', 'Store', 'Store.1', 'RR State','Profit Center', 'Article', 'Article.1', 'Family', 'Brick', 'Brand_ID','Calendar Year/Month', 'Qty', 'Total Gross Sales (B)','Total Category Discount (C)','Total Net Sales with tax', 'Tax amount','Total Net Sales Without Tax', 'COGS As Per MAP','COGS', 'Gross Margin', 'Margin (%)','Markdown Price Difference(L)','Markdown Price Difference(%)','Category Margin', 'Category % Gross Margin','Margin Per Unit']columns=rra_dump.columnsdf=rra_dump# Function to convert to 'Month Year' formatdef convert_to_month_year(value):    # Split the float into month and year    month, year = str(value).split('.')    month = int(month)  # Convert month to integer    year = int(year)    # Convert year to integer        # Get month name    month_name = calendar.month_name[month]        # Return in 'Month Year' format    return f"{month_name}_{year}"# Apply the function to the DataFramedf['Month_Year'] = df['Calendar Year/Month'].apply(convert_to_month_year)# Display the resultprint(df.tail())fofo_filtered = df[    (df['Channel Type'].isin(['ASP B2B FOFO', 'POS B2B SALES', 'ASP FOFO', 'POS SALES'])) |    (df['Channel Type.1'].isin(['ASP B2B FOFO', 'POS B2B SALES', 'ASP FOFO', 'POS SALES']))    ]fofo_filtered = fofo_filtered[fofo_filtered['Month_Year']==M_Y]# Assuming rra_dump is already loaded as your DataFramefofo_pivot = pd.pivot_table(    fofo_filtered,     values=['Qty', 'Total Net Sales with tax', 'Total Net Sales Without Tax', 'COGS'],    index=['Article', 'Store', 'RR State', 'Family', 'Brand_ID'],  # Use index to group by    aggfunc='sum'  # Aggregation method is 'sum').reset_index()#GST Ratejmd_filtered = df[    (df['Channel Type'].isin(['ASP B2B SALES','ASP SALES'])) |    (df['Channel Type.1'].isin(['ASP B2B SALES','ASP SALES']))    ]jmd_filtered = jmd_filtered[jmd_filtered['Month_Year']==M_Y]# Assuming rra_dump is already loaded as your DataFramejmd_gst_pivot = pd.pivot_table(    jmd_filtered,     values=['Total Net Sales with tax', 'Total Net Sales Without Tax'],    index=['Article'],  # Use index to group by    aggfunc='sum'  # Aggregation method is 'sum').reset_index()jmd_gst_pivot['GST Rate'] = np.where(jmd_gst_pivot['Total Net Sales Without Tax'] != 0, jmd_gst_pivot['Total Net Sales with tax'] / jmd_gst_pivot['Total Net Sales Without Tax'], 0)jmd_gst_pivot['GST Rate']=jmd_gst_pivot['GST Rate'].round(2)jmd_gst_pivot.to_excel('jmd_gst_pivot.xlsx')#COGS p.u.# COGS p.u.check_df = df[df['Channel Type'] == 490024627]jmd_cogs_pu = df[    (df['Channel Type'].isin(['ASP B2B FOFO', 'POS B2B SALES', 'ASP FOFO', 'POS SALES','POS B2B SALES','POS SALES','ASP B2B FOFO','ASP FOFO','BULK SALES'])) |    (df['Channel Type.1'].isin(['ASP B2B FOFO', 'POS B2B SALES', 'ASP FOFO', 'POS SALES','POS B2B SALES','POS SALES','ASP B2B FOFO','ASP FOFO','BULK SALES']))    ]jmd_cogs_pu_f = jmd_cogs_pu[jmd_cogs_pu['Month_Year']==M_Y]# Assuming rra_dump is already loaded as your DataFramecogs_pu_pivot = pd.pivot_table(    jmd_cogs_pu_f,     values=['Qty', 'COGS'],    index=['Article'],  # Use index to group by    aggfunc='sum'  # Aggregation method is 'sum').reset_index()cogs_pu_pivot['COGS p. u.']=cogs_pu_pivot['COGS']/cogs_pu_pivot['Qty']cogs_pu_pivot.to_csv('COGS p.u..csv')#Family and brandfnb_f = df[df['Month_Year']==M_Y]# Assuming rra_dump is already loaded as your DataFramefnb_pivot = pd.pivot_table(    fnb_f,     values=['Qty','Total Net Sales with tax','Total Net Sales Without Tax','COGS'],    index=['Article','Family', 'Brand_ID'],  # Use index to group by    aggfunc='sum'  # Aggregation method is 'sum').reset_index()fnb_pivot.to_csv('fnb.csv')#Articl_desc#Family and brandart_des_f = df[df['Month_Year']==M_Y]art_des_g=art_des_f[['Article','Article.1','Family', 'Brand_ID']]# Remove duplicate rowsart_des_g = art_des_g.drop_duplicates()art_des_g.to_csv('article_desc.csv')