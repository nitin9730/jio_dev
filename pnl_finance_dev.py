import osimport pandas as pdimport calendarimport numpy as npM_Y='August_2024'# RRA DUMPfile_path1 = '/Users/nitin14.patil/Library/CloudStorage/OneDrive-RelianceCorporateITParkLimited/Documents/python_work/PNL Finance/input/RRA_dump.xlsx'excel_file = pd.ExcelFile(file_path1)sheet_names = excel_file.sheet_namesrra_dump = pd.read_excel(excel_file)print('rra_dump loaded!')df=rra_dump# Function to convert to 'Month Year' formatdef convert_to_month_year(value):    # Split the float into month and year    month, year = str(value).split('.')    month = int(month)  # Convert month to integer    year = int(year)    # Convert year to integer        # Get month name    month_name = calendar.month_name[month]        # Return in 'Month Year' format    return f"{month_name}_{year}"# Apply the function to the DataFramerra_dump['Month_Year'] = rra_dump['Calendar YearMonth'].apply(convert_to_month_year)# Display the resultprint(rra_dump.tail())# Remove special characters from column headers# rra_dump.columns = rra_dump.columns.str.replace(r'[^\w\s]', '', regex=True)# print(rra_dump.columns)# Replace special characters and extra spaces in column namesrra_dump.columns = rra_dump.columns.str.replace(r'[^\w\s]', '', regex=True).str.replace('\s+', ' ', regex=True).str.strip()# Display the new column namesprint(rra_dump.columns)# import pandas as pd# # Assuming rra_dump is your DataFrame# # Create the pivot table# pivot_summary = pd.pivot_table(#     rra_dump,#     values=['Qty', 'Total Net Sales with tax DD1D2D3', 'Total Net Sales Without Tax FF1F2F3', 'COGS'],#     index=['Channel Type', 'Channel Type1'],  # Original indices#     aggfunc='sum',#     margins=True,  # This adds the Grand Total row#     margins_name='Grand Total'  # Rename the total row# )# # Resetting the index to combine# pivot_summary.reset_index(inplace=True)# # Combining the indices into a single column# pivot_summary['Combined Index'] = pivot_summary['Channel Type'] + "_" + pivot_summary['Channel Type1']# # Setting the new combined index# pivot_summary.set_index('Combined Index', inplace=True)# # Dropping the old index columns if necessary# pivot_summary.drop(columns=['Channel Type', 'Channel Type1'], inplace=True)# pivot_summary.reset_index(inplace=True)# pivot_summary = pivot_summary[pivot_summary['Combined Index'].isin(['ASP B2B FOFO_ASP B2B FOFO', 'POS B2B SALES_POS B2B SALES', 'ASP FOFO_ASP FOFO', 'POS SALES_POS SALES'])]# Format Summary# # Display the final pivot table# print(pivot_summary)rra_dump.dtypesfofo_filtered = rra_dump[    (rra_dump['Channel Type'].isin(['ASP B2B FOFO', 'POS B2B SALES', 'ASP FOFO', 'POS SALES'])) |    (rra_dump['Channel Type1'].isin(['ASP B2B FOFO', 'POS B2B SALES', 'ASP FOFO', 'POS SALES']))    ]fofo_filtered = fofo_filtered[fofo_filtered['Month_Year']==M_Y]# Assuming rra_dump is already loaded as your DataFramefofo_pivot = pd.pivot_table(    fofo_filtered,     values=['Qty', 'Total Net Sales with tax DD1D2D3', 'Total Net Sales Without Tax FF1F2F3', 'COGS'],    index=['Article', 'Store', 'RR State', 'Family', 'Brand_ID'],  # Use index to group by    aggfunc='sum'  # Aggregation method is 'sum').reset_index()# Renaming columns for clarity (optional, adjust as needed)# fofo_pivot.columns = ['Article', 'Store', 'RR State', 'Family', 'Brand_ID', 'Sum of Qty', #                       'Total Net Sales with tax', 'Total Net Sales Without Tax', 'Sum of COGS']check_df=fofo_pivot[fofo_pivot['Article']==490034208]fofo_pivot.to_excel('fofo_pivot_check.xlsx')#GST Ratejmd_filtered = rra_dump[    (rra_dump['Channel Type'].isin(['ASP B2B SALES','ASP SALES'])) |    (rra_dump['Channel Type1'].isin(['ASP B2B SALES','ASP SALES']))    ]jmd_filtered = jmd_filtered[jmd_filtered['Month_Year']==M_Y]# Assuming rra_dump is already loaded as your DataFramejmd_gst_pivot = pd.pivot_table(    jmd_filtered,     values=['Total Net Sales with tax DD1D2D3', 'Total Net Sales Without Tax FF1F2F3'],    index=['Article'],  # Use index to group by    aggfunc='sum'  # Aggregation method is 'sum').reset_index()jmd_gst_pivot['GST Rate'] = np.where(jmd_gst_pivot['Total Net Sales Without Tax FF1F2F3'] != 0, jmd_gst_pivot['Total Net Sales with tax DD1D2D3'] / jmd_gst_pivot['Total Net Sales Without Tax FF1F2F3'], 0)jmd_gst_pivot['GST Rate']=jmd_gst_pivot['GST Rate'].round(2)jmd_gst_pivot.to_excel('jmd_gst_pivot.xlsx')#COGS p.u.# COGS p.u.# # Create a pivot table# pivot_table_st = df_st.pivot_table(index='OrderI D (20 digit)', columns='Type.1', values='Gross amount', aggfunc='sum')